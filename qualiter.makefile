
#
# RENDERED FOR VERSION: 1.0.18
#
# WARNING: This file is autogenerated by the `qualiter` and any manual changes
# you will apply here will be overwritten by next `qualiter init <project>`
# invocation.
#

SHELL := /bin/bash

CHECKERS_DIR := ./.git/.qualiter/checkers

EXISTS := $(shell command -v google-chrome)

help:  ## show this help.
	@fgrep -h "##" $(MAKEFILE_LIST) | fgrep -v fgrep | sed -e 's/\\$$//' | sed -e 's/##//'

#
# TESTS & CODE QUALITY
#
METRICS := $(shell qualiter fetch_metrics)

TEST_COVERAGE_THRESHOLD := $(shell python -c "import sys; sys.stdout.write('${METRICS}'.split('|')[0])")

CODE_CONVENTION_CODES := $(shell python -c "import sys; sys.stdout.write('${METRICS}'.split('|')[1])")

TEST_CONVENTION_CODES := $(shell python -c "import sys; sys.stdout.write('${METRICS}'.split('|')[2])")

.PHONY: lint
lint:  ## lint the logger & tests
	printf "\n>> [CHECKER] check if code fulfills quality criteria\n" && \
	source env.sh && \
	flake8 --select=${TEST_CONVENTION_CODES} tests && \
	flake8 --select=${CODE_CONVENTION_CODES} logger

#
# RUN TEST BOTH TYPES: UNIT + INTEGRATION
# should be used for complete test running
#
.PHONY: test
test:  ## run selected tests
	printf "\n>> [CHECKER] check if chosen tests are passing\n" && \
	source env.sh && \
	py.test --cov=logger --cov-fail-under=${TEST_COVERAGE_THRESHOLD} -r w -s -vv $(tests)

.PHONY: test_all
test_all:  ## run all available tests
	printf "\n>> [CHECKER] check if all tests are passing\n" && \
	source env.sh && \
	py.test --cov=logger --cov-fail-under=${TEST_COVERAGE_THRESHOLD} -r w -s -vv tests && \
    coverage html -d coverage_html

#
# UNIT TESTS
#
.PHONY: test_unit
test_unit:  ## run selected unit tests
	printf "\n>> [CHECKER] check if chosen unit tests are passing\n" && \
	source env.sh && \
	py.test -m 'not integration' --cov=logger --cov-fail-under=${TEST_COVERAGE_THRESHOLD} -r w -s -vv $(tests)

.PHONY: test_unit_all
test_unit_all:  ## run all available unit tests
	printf "\n>> [CHECKER] check if all unit tests are passing\n" && \
	source env.sh && \
	py.test -m 'not integration' --cov=logger --cov-fail-under=${TEST_COVERAGE_THRESHOLD} -r w -s -vv tests && \
    coverage html -d coverage_html

.PHONY: test_unit_all_jenkins
test_unit_all_jenkins:  ## run all available unit tests for jenkins (junit output)
	printf "\n>> [CHECKER] check if all unit tests are passing and produce junit report\n" && \
	source env.sh && \
	py.test -m 'not integration' --junit-xml=test_unit_all_jenkins.xml --cov=logger --cov-fail-under=${TEST_COVERAGE_THRESHOLD} -r w -s -vv tests && \
    coverage html -d coverage_html

#
# INTEGRATION TESTS
# Integration tests runner for jenkins is skipped on purpose since they will most
# likely always require extra input parameters which are job specific
#
.PHONY: test_integration
test_integration:  ## run selected integration tests
	printf "\n>> [CHECKER] check if chosen integration tests are passing\n" && \
	source env.sh && \
	py.test -m 'integration' -r w -s -vv $(tests)

.PHONY: test_integration_all
test_integration_all:  ## run all available integration tests
	printf "\n>> [CHECKER] check if all integration tests are passing\n" && \
	source env.sh && \
	py.test -m 'integration' -r w -s -vv tests

#
# COVERAGE
#
.PHONY: inspect_coverage
inspect_coverage: test_all  ## render html coverage report and jump to it
	if [ ! -z ${EXISTS} ]; \
	then google-chrome coverage_html/index.html; \
	else open coverage_html/index.html; \
	fi
